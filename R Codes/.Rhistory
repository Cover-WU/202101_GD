geom_smooth(aes(color = `Scenario`), method = "lm") +
facet_grid(variable ~ `Level of Vitality`, scales = "free_y")
# fixation is significant
ggplot(aggregate_data, aes(x = `Interpersonal Trust`, y = Average_duration_of_whole_fixations)) +
geom_point(aes(color = `Level of Vitality`),  alpha = 0.4) +
geom_smooth(aes(color = `Level of Vitality`), method = "lm") +
facet_grid( ~ Scenario, scales = "free_y")
# outlier removing function
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
# apply the function to DV
aggregate_data_screen <- aggregate_data %>% mutate_at(vars(Satisfaction:Vitality_attention_standardized), remove_outliers)
View(aggregate_data_screen)
View(fa_scores)
View(aggregate_data)
aggregate_data %>% select(Escape:Compatibility) %>% cor
aggregate_data %>% select(Escape:Compatibility) %>% cor(na.rm = TRUE)
aggregate_data %>% select(Escape:Compatibility) %>% cor(use = "pairwise.complete.obs")
aggregate_data %>% select(Satisfaction:Compatibility) %>% cor(use = "pairwise.complete.obs")
# aggregate_data, yyds.
for_pca <- aggregate_data %>% select(Escape:Compatibility)
fa.parallel(for_pca, fa="pc", n.iter=100, show.legend=FALSE, main="Scree plot with parallel analysis")
# principal analysis
pca <- principal(for_pca, nfactors = 1, scores = TRUE)
View(pca)
pca$scores
pca
aggregate_data %>% mutate(Restoration = pca$scores)
View(aggregate_data)
View(aggregate_data)
aggregate_data %>% mutate(Restoration = pca$scores)
ans <- pca$scores
rm(ans)
aggregate_data %>% mutate(Restoration = pca$scores)
aggregate_data %>% mutate(Restoration = 1)
aggregate_data %<>% mutate(Restoration = pca$scores)
library(magrittr)
aggregate_data %<>% mutate(Restoration = pca$scores)
View(aggregate_data)
aggregate_data %>% select(Restoration, Total_duration_of_whole_fixations:Saccade_frequency) %>% cor(use = "pairwise.complete.obs") %>% .[,1]
aggregate_data %>% select(Restoration, Total_duration_of_whole_fixations:Saccade_frequency) %>% corr.test(use = "pairwise.complete.obs") %>% .[,1]
aggregate_data %>% select(Restoration, Total_duration_of_whole_fixations:Saccade_frequency) %>% corr.test(use = "pairwise.complete.obs")
aggregate_data %>% select(Total_duration_of_whole_fixations:Saccade_frequency) %>%
map(cor.test(aggregate_data$Restoration))
aggregate_data %>% select(Total_duration_of_whole_fixations:Saccade_frequency) %>%
map(~ cor.test(., aggregate_data$Restoration))
participant <- read_csv("participant.csv")
View(participant)
participant <- read_csv("participant.csv")
View(participant)
participant <- read_csv("participant.csv", col_types = cols(gender = col_factor(levels = c("female", "male"))))
participant <- read_csv("participant.csv", col_types = cols(gender = col_factor(levels = c("female" = "0", "male" = "1"))))
participant <- read_csv("participant.csv", col_types = cols(gender = col_factor(levels = c("0" = "female", "1" = "male"))))
participant <- read_csv("participant.csv", col_types = cols(gender = col_factor(levels = c("female" = "0", "male" = "1"))))
participant <- read_csv("participant.csv", col_types = cols(gender = col_factor(levels = c("female" = "0", "male" = "1")))) %>% select(-Recording) %>% unique()
aggregate_data %<>% left_join(participant, by = c("Key" = "Participant"))
participant <- read_csv("participant.csv", col_types = cols(
gender = col_factor(levels = c("female" = "0", "male" = "1")),
Participant = col_character())) %>% select(-Recording) %>% unique()
aggregate_data %<>% left_join(participant, by = c("Key" = "Participant"))
View(aggregate_data)
participant <- read_csv("participant.csv", col_types = cols(
gender = col_factor(levels = c("0", "1"), labels = c("female", "male")),
Participant = col_character())) %>% select(-Recording) %>% unique()
participant <- read_csv("participant.csv", col_types = cols(
gender = col_factor(levels = c("0", "1")),
Participant = col_character())) %>% select(-Recording) %>% unique()
aggregate_data %>% mutate(gender = factor(gender, labels = c("female", "male")))
ans <- aggregate_data %>% mutate(gender = factor(gender, labels = c("female", "male")))
View(ans)
ans <- aggregate_data %>% mutate(gender = factor(gender, labels = c("female", "male"))) %>%
select(RecordedDate, Key, Name, Gender = gender, Scenario:Compatibility, Restoration, everything())
View(ans)
# put all types of dataframe together to form a complete one:
aggregate_data <- inner_join(personality, visit_scale_score, by = "Key") %>%
left_join(eye_data, by = c("Key", "Scenario", "Level of Vitality")) %>%
select(RecordedDate, Key, `Level of Vitality`, Scenario, everything()) %>%
mutate(`Level of Trust` = if_else(`Interpersonal Trust` >= median(.$`Interpersonal Trust`), "High", "Low") %>% factor()) %>% ungroup()
# aggregate_data, yyds.
for_pca <- aggregate_data %>% select(Escape:Compatibility)
# aggregate_data, yyds.
for_pca <- aggregate_data %>% select(Escape:Compatibility)
# Scree plot: how many components should be extracted?
fa.parallel(for_pca, fa="pc", n.iter=100, show.legend=FALSE, main="Scree plot with parallel analysis")
# aggregate_data, yyds.
for_pca <- aggregate_data %>% select(Escape:Compatibility)
# Scree plot: how many components should be extracted?
fa.parallel(for_pca, fa="pc", n.iter=100, show.legend=FALSE, main="Scree plot with parallel analysis")
# principal analysis and output the principal score.
pca <- principal(for_pca, nfactors = 1, scores = TRUE)
aggregate_data_plus <- aggregate_data %>% mutate(Restoration = pca$scores)
# Compute the correlation to verify the ART.
# aggregate_data %>% select(Restoration, Total_duration_of_whole_fixations:Saccade_frequency) %>%
#   corr.test(use = "pairwise.complete.obs")
aggregate_data_plus <- aggregate_data %>% select(Total_duration_of_whole_fixations:Saccade_frequency) %>%
map(~ cor.test(., aggregate_data$Restoration))
# Compute the correlation to verify the ART.
aggregate_data_plus %>% select(Total_duration_of_whole_fixations:Saccade_frequency) %>%
map(~ cor.test(., aggregate_data_plus$Restoration))
aggregate_data_plus %<>% left_join(participant, by = c("Key" = "Participant"))
aggregate_data_plus <- aggregate_data %>% mutate(Restoration = pca$scores)
aggregate_data_plus %<>% left_join(participant, by = c("Key" = "Participant")) %>%
mutate(gender = factor(gender, labels = c("female", "male"))) %>%
select(RecordedDate, Key, Name, Gender = gender, Scenario:Compatibility, Restoration, everything())
View(aggregate_data_plus)
aov(Restoration ~ Scenario * Gender * `Level of Vitality`, data = aggregate_data_plus) %>% summary
aov(Restoration ~ Scenario * Gender * `Level of Vitality` + Error(Key/Scenario), data = aggregate_data_plus) %>% summary
rm(list = ls())
load("20200201_Data.RData"); load("20200219_EyeData_plus.RData")
library(psych)
library(lavaan)
library(nlme)
library(lme4)
library(performance)
library(lmerTest)
library(tidyverse)
library(magrittr)
# descriptive stat results of personality data.
describe(personality %>% select(Neuroticism:`Interpersonal Trust`))
# visualization: data distribution.
ggplot(personality %>% select(Neuroticism:`Interpersonal Trust`) %>% gather(everything(), key = 'Variable', value = 'Score')) +
geom_histogram(aes(x = Score), fill = "#CC6666") +
facet_wrap(~ Variable, nrow = 2)
# descriptive stat results of visiting experience: note, there's 2 ways to code, in which multiple columns can be analyzed at the same time.
#   method 1: old coding style, yield an intermediate variable "for_descriptive_stat"
for_descriptive_stat <- left_join(visit_scale_score, personality[c("Key", "Level of Vitality")], by = "Key")
describeBy(x = select(for_descriptive_stat, Satisfaction:Compatibility),
group = list(for_descriptive_stat$Scenario, for_descriptive_stat$`Level of Vitality`))
#   method 2: pipe style.
# left_join(visit_scale_score, personality[c("Key", "Level of Vitality")], by = "Key") %>%
#   {describeBy(x = select(., Satisfaction:Compatibility),
#     group = list(.$Scenario, .$`Level of Vitality`))}
# data visualization:
ggplot(for_descriptive_stat %>% gather(Satisfaction:Compatibility, key = 'Variable', value = 'Score'),
aes(x = `Level of Vitality`, y = Score)) +
geom_boxplot(aes(fill = Scenario), position = position_dodge(0.8)) +
geom_point(aes(color = Scenario), position = position_jitterdodge(dodge.width = 0.8, jitter.height = 0.06), alpha = 0.35) +
facet_wrap(~ Variable, nrow = 5)
# descriptive analysis
for_descriptive_stat <- eye_data %>% select(Key:`Level of Vitality`, Average_duration_of_whole_fixations, Average_peak_velocity_of_saccades, Average_amplitude_of_saccades, Average_pupil_size, Total_amplitude_of_saccades:Saccade_frequency, Vitality_attention, Vitality_attention_standardized)
describeBy(x = select(for_descriptive_stat, -(Key:`Level of Vitality`)),
group = list(for_descriptive_stat$Scenario, for_descriptive_stat$`Level of Vitality`))
# visualization: distribution
ggplot(for_descriptive_stat %>% gather(-(Key:`Level of Vitality`), key = 'Variable', value = 'Score')) +
geom_histogram(aes(x = Score), fill = "#7777DD") +
facet_wrap(~ Variable, ncol = 3, scales = "free")
trait_trust %>% select(-Key) %>% psych::alpha()
visit_scale %>% select(Escape1:Escape5) %>% psych::alpha()
visit_scale %>% select(Fascination1:Fascination5) %>% psych::alpha()
visit_scale %>% select(Coherence1:Coherence4) %>% psych::alpha()
visit_scale %>% select(Compatibility1:Compatibility5) %>% psych::alpha()
vital_subjective %>% psych::alpha()
# constuctive validity: CFA
PRS.model <- 'Escape =~ Escape1 + Escape2 + Escape3 + Escape4 + Escape5
Fascination =~ Fascination1 + Fascination2 + Fascination3 + Fascination4 + Fascination5
Coherence =~ Coherence1 + Coherence2 + Coherence3 + Coherence4
Compatibility =~ Compatibility1 + Compatibility2 + Compatibility3 + Compatibility4 + Compatibility5'
fit <- cfa(PRS.model, data = visit_scale)
summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
# criterion validity: canonical correlation
# prediction variables are organized in list.
prs_cluster <- visit_scale_score %>% ungroup %>%  select(-RecordedDate, -Satisfaction) %>%
split(.$Scenario) %>% map(~arrange(., Key) %>% select(-Scenario, -Key))
# criterion
criterion <- vital_subjective_score %>% ungroup %>% select(-(vital_1:vital_7)) %>%
spread(stage, `Subjective Vitality`) %>% mutate(`Change of Subjective Vitality` = after - before) %>%
arrange(Key) %>% select(`Change of Subjective Vitality`)
# measure whether the four factors can converge to a single construct: Perceived Restorative.
prs_cluster %>% map(~ fa.parallel(., fa = "both"))
# results show that four factors should be reduced into only 1 dimension except for metro scenario (2 dimension)
# then we start the verification.
# There's one missing value in metro scenario, which should be plugged in.
prs_cluster$`Metro Station` <- prs_cluster$`Metro Station` %>% fill(everything())
# for each scenario, factor analysis is conducted with its factor score computed.
# factor scores in four scenario will be in one record (row), as X with four columns.
fa_scores <- prs_cluster %>% map_df(~factanal(., 1, scores = "Bartlett") %>% .$scores)
# compute the canonical correlation
cancor_result <- cancor(fa_scores, criterion)
# test the corelation coefficient
corcoef.test<-function(r, n, p, q, alpha=0.05){
m<-length(r); Q<-rep(0, m); lambda <- 1
for (k in m:1){
lambda<-lambda*(1-r[k]^2);
Q[k]<- -log(lambda)
}
s<-0; i<-m
for (k in 1:m){
Q[k]<- (n-k+1-1/2*(p+q+3)+s)*Q[k]
chi<-1-pchisq(Q[k], (p-k+1)*(q-k+1))
if (chi>alpha){
i<-k-1; print(chi); break
}
s<-s+1/r[k]^2
}
i
}
# will return the number of significant coefficient.
for (alpha in seq(0.003, 0.004, by = 0.0005)){
num <- corcoef.test(cancor_result$cor, 72, 4, 1, alpha = alpha)
print(alpha); print(num)
}
# put all types of dataframe together to form a complete one:
aggregate_data <- inner_join(personality, visit_scale_score, by = "Key") %>%
left_join(eye_data, by = c("Key", "Scenario", "Level of Vitality")) %>%
select(RecordedDate, Key, `Level of Vitality`, Scenario, everything()) %>%
mutate(`Level of Trust` = if_else(`Interpersonal Trust` >= median(.$`Interpersonal Trust`), "High", "Low") %>% factor()) %>% ungroup()
# exploratory data insight: ggplot to find hidden rules.
# for different scenario and PRS subscale: facet 4 by 4.
ggplot(data = aggregate_data %>% gather(Escape:Compatibility, key = 'variable', value = 'Score'),
aes(x = `Interpersonal Trust`, y = Score)) +
geom_point(aes(color = `Level of Vitality`),  alpha = 0.4) +
geom_smooth(aes(color = `Level of Vitality`), method = "lm") +
facet_grid(variable ~ Scenario, scales = "free_y")
# for different vitality level and PRS subscale: facet 2 by 4
ggplot(data = aggregate_data %>% gather(Escape:Compatibility, key = 'variable', value = 'Score'),
aes(x = `Interpersonal Trust`, y = Score)) +
geom_point(aes(color = `Scenario`),  alpha = 0.4) +
geom_smooth(aes(color = `Scenario`), method = "lm") +
facet_grid(variable ~ `Level of Vitality`, scales = "free_y")
# fixation is significant
ggplot(aggregate_data, aes(x = `Interpersonal Trust`, y = Average_duration_of_whole_fixations)) +
geom_point(aes(color = `Level of Vitality`),  alpha = 0.4) +
geom_smooth(aes(color = `Level of Vitality`), method = "lm") +
facet_grid( ~ Scenario, scales = "free_y")
# outlier removing function
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
# apply the function to DV
aggregate_data_screen <- aggregate_data %>% mutate_at(vars(Satisfaction:Vitality_attention_standardized), remove_outliers)
aggregate_data %>% select(Satisfaction:Compatibility) %>% cor(use = "pairwise.complete.obs")
# aggregate_data, yyds.
for_pca <- aggregate_data %>% select(Escape:Compatibility)
# Scree plot: how many components should be extracted?
fa.parallel(for_pca, fa="pc", n.iter=100, show.legend=FALSE, main="Scree plot with parallel analysis")
# principal analysis and output the principal score.
pca <- principal(for_pca, nfactors = 1, scores = TRUE)
aggregate_data_plus <- aggregate_data %>% mutate(Restoration = pca$scores)
# Compute the correlation to verify the ART.
aggregate_data_plus %>% select(Total_duration_of_whole_fixations:Saccade_frequency) %>%
map(~ cor.test(., aggregate_data_plus$Restoration))
# aggregate_data %>% select(Restoration, Total_duration_of_whole_fixations:Saccade_frequency) %>%
#   corr.test(use = "pairwise.complete.obs")
aggregate_data_wide <- aggregate_data_plus %>% spread(Scenario, Restoration)
View(aggregate_data_wide)
aggregate_data_wide <- aggregate_data_plus %>% select(Key, Name, `Level of Vitality`, Scenario, Gender, Restoration) %>% spread(Scenario, Restoration)
participant <- read_csv("participant.csv", col_types = cols(
gender = col_factor(levels = c("0", "1")),
Participant = col_character())) %>% select(-Recording) %>% unique()
aggregate_data_plus %<>% left_join(participant, by = c("Key" = "Participant")) %>%
mutate(gender = factor(gender, labels = c("female", "male"))) %>%
select(RecordedDate, Key, Name, Gender = gender, Scenario:Compatibility, Restoration, everything())
aggregate_data_wide <- aggregate_data_plus %>% select(Key, Name, `Level of Vitality`, Scenario, Gender, Restoration) %>% spread(Scenario, Restoration)
View(aggregate_data_wide)
aggregate_data_wide <- aggregate_data_plus %>% select(Key, Name, `Level of Vitality`, Scenario, Gender, Restoration) %>% spread(Scenario, Restoration)
fit_repeated <- lm(aggregate_data_wide %>% select(`Business District`:`Pedestrian Zone`) ~ 1, data = aggregate_data_wide)
fit_repeated <- lm(aggregate_data_wide %>% select(`Business District`:`Pedestrian Zone`) %>% as.matrix() ~ 1, data = aggregate_data_wide)
View(fit_repeated)
library(car)
in_repeated <- expand.grid(`Level of Vitality` = gl(4, 1))
View(in_repeated)
in_repeated <- expand.grid(`Scenario` = gl(4, 1))
Anova(fit_repeated, idata = in_repeated, idesign = ~ `Level of Vitality` * Gender * Scenario)
summary(three_factor_aov, multivariate = FALSE, univariate = TRUE)
three_factor_aov <- Anova(fit_repeated, idata = in_repeated, idesign = ~ Scenario, type = 'III')
rm(list = ls())
load("20200201_Data.RData"); load("20200219_EyeData_plus.RData")
library(car)
library(phia)
library(psych)
library(lavaan)
library(nlme)
library(lme4)
library(performance)
library(lmerTest)
library(magrittr)
library(tidyverse)
# descriptive stat results of personality data.
describe(personality %>% select(Neuroticism:`Interpersonal Trust`))
# visualization: data distribution.
ggplot(personality %>% select(Neuroticism:`Interpersonal Trust`) %>% gather(everything(), key = 'Variable', value = 'Score')) +
geom_histogram(aes(x = Score), fill = "#CC6666") +
facet_wrap(~ Variable, nrow = 2)
# descriptive stat results of visiting experience: note, there's 2 ways to code, in which multiple columns can be analyzed at the same time.
#   method 1: old coding style, yield an intermediate variable "for_descriptive_stat"
for_descriptive_stat <- left_join(visit_scale_score, personality[c("Key", "Level of Vitality")], by = "Key")
describeBy(x = select(for_descriptive_stat, Satisfaction:Compatibility),
group = list(for_descriptive_stat$Scenario, for_descriptive_stat$`Level of Vitality`))
#   method 2: pipe style.
# left_join(visit_scale_score, personality[c("Key", "Level of Vitality")], by = "Key") %>%
#   {describeBy(x = select(., Satisfaction:Compatibility),
#     group = list(.$Scenario, .$`Level of Vitality`))}
# data visualization:
ggplot(for_descriptive_stat %>% gather(Satisfaction:Compatibility, key = 'Variable', value = 'Score'),
aes(x = `Level of Vitality`, y = Score)) +
geom_boxplot(aes(fill = Scenario), position = position_dodge(0.8)) +
geom_point(aes(color = Scenario), position = position_jitterdodge(dodge.width = 0.8, jitter.height = 0.06), alpha = 0.35) +
facet_wrap(~ Variable, nrow = 5)
# descriptive analysis
for_descriptive_stat <- eye_data %>% select(Key:`Level of Vitality`, Average_duration_of_whole_fixations, Average_peak_velocity_of_saccades, Average_amplitude_of_saccades, Average_pupil_size, Total_amplitude_of_saccades:Saccade_frequency, Vitality_attention, Vitality_attention_standardized)
describeBy(x = select(for_descriptive_stat, -(Key:`Level of Vitality`)),
group = list(for_descriptive_stat$Scenario, for_descriptive_stat$`Level of Vitality`))
# visualization: distribution
ggplot(for_descriptive_stat %>% gather(-(Key:`Level of Vitality`), key = 'Variable', value = 'Score')) +
geom_histogram(aes(x = Score), fill = "#7777DD") +
facet_wrap(~ Variable, ncol = 3, scales = "free")
trait_trust %>% select(-Key) %>% psych::alpha()
visit_scale %>% select(Escape1:Escape5) %>% psych::alpha()
visit_scale %>% select(Fascination1:Fascination5) %>% psych::alpha()
visit_scale %>% select(Coherence1:Coherence4) %>% psych::alpha()
visit_scale %>% select(Compatibility1:Compatibility5) %>% psych::alpha()
vital_subjective %>% psych::alpha()
# constuctive validity: CFA
PRS.model <- 'Escape =~ Escape1 + Escape2 + Escape3 + Escape4 + Escape5
Fascination =~ Fascination1 + Fascination2 + Fascination3 + Fascination4 + Fascination5
Coherence =~ Coherence1 + Coherence2 + Coherence3 + Coherence4
Compatibility =~ Compatibility1 + Compatibility2 + Compatibility3 + Compatibility4 + Compatibility5'
fit <- cfa(PRS.model, data = visit_scale)
summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
# criterion validity: canonical correlation
# prediction variables are organized in list.
prs_cluster <- visit_scale_score %>% ungroup %>%  select(-RecordedDate, -Satisfaction) %>%
split(.$Scenario) %>% map(~arrange(., Key) %>% select(-Scenario, -Key))
# criterion
criterion <- vital_subjective_score %>% ungroup %>% select(-(vital_1:vital_7)) %>%
spread(stage, `Subjective Vitality`) %>% mutate(`Change of Subjective Vitality` = after - before) %>%
arrange(Key) %>% select(`Change of Subjective Vitality`)
# measure whether the four factors can converge to a single construct: Perceived Restorative.
prs_cluster %>% map(~ fa.parallel(., fa = "both"))
# results show that four factors should be reduced into only 1 dimension except for metro scenario (2 dimension)
# then we start the verification.
# There's one missing value in metro scenario, which should be plugged in.
prs_cluster$`Metro Station` <- prs_cluster$`Metro Station` %>% fill(everything())
# for each scenario, factor analysis is conducted with its factor score computed.
# factor scores in four scenario will be in one record (row), as X with four columns.
fa_scores <- prs_cluster %>% map_df(~factanal(., 1, scores = "Bartlett") %>% .$scores)
# compute the canonical correlation
cancor_result <- cancor(fa_scores, criterion)
# test the corelation coefficient
corcoef.test<-function(r, n, p, q, alpha=0.05){
m<-length(r); Q<-rep(0, m); lambda <- 1
for (k in m:1){
lambda<-lambda*(1-r[k]^2);
Q[k]<- -log(lambda)
}
s<-0; i<-m
for (k in 1:m){
Q[k]<- (n-k+1-1/2*(p+q+3)+s)*Q[k]
chi<-1-pchisq(Q[k], (p-k+1)*(q-k+1))
if (chi>alpha){
i<-k-1; print(chi); break
}
s<-s+1/r[k]^2
}
i
}
# will return the number of significant coefficient.
for (alpha in seq(0.003, 0.004, by = 0.0005)){
num <- corcoef.test(cancor_result$cor, 72, 4, 1, alpha = alpha)
print(alpha); print(num)
}
# put all types of dataframe together to form a complete one:
aggregate_data <- inner_join(personality, visit_scale_score, by = "Key") %>%
left_join(eye_data, by = c("Key", "Scenario", "Level of Vitality")) %>%
select(RecordedDate, Key, `Level of Vitality`, Scenario, everything()) %>%
mutate(`Level of Trust` = if_else(`Interpersonal Trust` >= median(.$`Interpersonal Trust`), "High", "Low") %>% factor()) %>% ungroup()
# exploratory data insight: ggplot to find hidden rules.
# for different scenario and PRS subscale: facet 4 by 4.
ggplot(data = aggregate_data %>% gather(Escape:Compatibility, key = 'variable', value = 'Score'),
aes(x = `Interpersonal Trust`, y = Score)) +
geom_point(aes(color = `Level of Vitality`),  alpha = 0.4) +
geom_smooth(aes(color = `Level of Vitality`), method = "lm") +
facet_grid(variable ~ Scenario, scales = "free_y")
# for different vitality level and PRS subscale: facet 2 by 4
ggplot(data = aggregate_data %>% gather(Escape:Compatibility, key = 'variable', value = 'Score'),
aes(x = `Interpersonal Trust`, y = Score)) +
geom_point(aes(color = `Scenario`),  alpha = 0.4) +
geom_smooth(aes(color = `Scenario`), method = "lm") +
facet_grid(variable ~ `Level of Vitality`, scales = "free_y")
# fixation is significant
ggplot(aggregate_data, aes(x = `Interpersonal Trust`, y = Average_duration_of_whole_fixations)) +
geom_point(aes(color = `Level of Vitality`),  alpha = 0.4) +
geom_smooth(aes(color = `Level of Vitality`), method = "lm") +
facet_grid( ~ Scenario, scales = "free_y")
# outlier removing function
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
# apply the function to DV
aggregate_data_screen <- aggregate_data %>% mutate_at(vars(Satisfaction:Vitality_attention_standardized), remove_outliers)
aggregate_data %>% select(Satisfaction:Compatibility) %>% corr.test(use = "pairwise")
# aggregate_data, yyds.
for_pca <- aggregate_data %>% select(Escape:Compatibility)
# Scree plot: how many components should be extracted?
fa.parallel(for_pca, fa="pc", n.iter=100, show.legend=FALSE, main="Scree plot with parallel analysis")
# principal analysis and output the principal score.
pca <- principal(for_pca, nfactors = 1, scores = TRUE)
aggregate_data_plus <- aggregate_data %>% mutate(Restoration = pca$scores)
# Compute the correlation to verify the ART.
aggregate_data_plus %>% select(Total_duration_of_whole_fixations:Saccade_frequency, Average_pupil_size) %>%
map(~ cor.test(., aggregate_data_plus$Restoration))
# another coding style...
corr.test(aggregate_data_plus %>% select(Restoration), aggregate_data_plus %>% select(Total_duration_of_whole_fixations:Saccade_frequency, Average_pupil_size), use = "pairwise.complete.obs")
participant <- read_csv("participant.csv", col_types = cols(
gender = col_factor(levels = c("0", "1")),
Participant = col_character())) %>% select(-Recording) %>% unique()
aggregate_data_plus %<>% left_join(participant, by = c("Key" = "Participant")) %>%
mutate(gender = factor(gender, labels = c("Female", "Male"))) %>%
select(RecordedDate, Key, Name, Gender = gender, Scenario:Compatibility, Restoration, everything())
# three_factor_aov <- aov(Restoration ~ Scenario * Gender * `Level of Vitality` + Error(Key/Scenario), data = aggregate_data_plus)
# repeated-measure anova: using Anova() in car package.
aggregate_data_wide <- aggregate_data_plus %>% select(Key, Name, `Level of Vitality`, Scenario, Gender, Restoration) %>% spread(Scenario, Restoration)
fit_repeated <- lm(cbind(`Business District`, `Metro Station`, `Night Traffic`, `Pedestrian Zone`) ~ Gender * `Level of Vitality`, data = aggregate_data_wide)
in_repeated <- expand.grid(`Scenario` = c("Business District", "Metro Station", "Night Traffic", "Pedestrian Zone"))
three_factor_aov <- Anova(fit_repeated, idata = in_repeated, idesign = ~ Scenario, type = 'III')
summary(three_factor_aov, multivariate = FALSE, univariate = TRUE)
aggregate_data_summary <- aggregate_data_plus %>%
select(Key, Gender, `Level of Vitality`, Restoration) %>%
group_by(Gender, `Level of Vitality`) %>%
summarise(mean = mean(Restoration, na.rm = TRUE),
se = sd(Restoration, na.rm = TRUE) / (n()-1))
ggplot(aggregate_data_summary, aes(x = Gender, y = mean, group = `Level of Vitality`)) +
geom_bar(aes(fill = `Level of Vitality`), stat = "identity",
position = "dodge", alpha = 0.60) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), stat = "identity",
position = position_dodge(0.9), width = .35) +
scale_y_continuous(name = "Restoration")+
theme(legend.position = "bottom")
ggplot(aggregate_data_summary, aes(x = Gender, y = mean, group = `Level of Vitality`)) +
geom_bar(aes(fill = `Level of Vitality`), stat = "identity",
position = "dodge", alpha = 0.20) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), stat = "identity",
position = position_dodge(0.9), width = .35) +
scale_y_continuous(name = "Restoration") +
theme(legend.position = "bottom") +
geom_point(aes(x = Gender, y = Restoration, color = `Level of Vitality`),
data = aggregate_data_plus, position = position_jitterdodge(dodge.width = 0.9))
# confirm the interaction
testInteractions(fit_repeated, idata = in_repeated)
View(in_repeated)
# confirm the interaction
testInteractions(fit_repeated, idata = in_repeated %>% data.frame())
# confirm the interaction
testInteractions(fit_repeated, idata = in_repeated %>% as.data.frame())
# confirm the interaction
testInteractions(fit_repeated, idata = in_repeated, pairwise = c("Gender", "Level of Vitality"))
# confirm the interaction
testInteractions(fit_repeated, idata = in_repeated, idesign = ~ Scenario, pairwise = c("Gender", "Level of Vitality"))
fit_repeated <- lm(cbind(`Business District`, `Metro Station`, `Night Traffic`, `Pedestrian Zone`) ~ Gender * `Level of Vitality`, data = aggregate_data_wide)
in_repeated <- expand.grid(`Scenario` = c("`Business District`", "`Metro Station`", "`Night Traffic`", "`Pedestrian Zone`"))
three_factor_aov <- Anova(fit_repeated, idata = in_repeated, idesign = ~ Scenario, type = 'III')
three_factor_aov <- Anova(fit_repeated, idata = in_repeated, idesign = ~ Scenario, type = 'III')
summary(three_factor_aov, multivariate = FALSE, univariate = TRUE)
# confirm the interaction
testInteractions(fit_repeated, idata = in_repeated, idesign = ~ Scenario, pairwise = c("Gender", "Level of Vitality"))
aggregate_data_summary <- aggregate_data_plus %>%
select(Key, Gender, `Level of Vitality`, Restoration) %>%
group_by(Gender, `Level of Vitality`) %>%
summarise(mean = mean(Restoration, na.rm = TRUE),
se = sd(Restoration, na.rm = TRUE) / (n()-1))
# confirm the interaction
testInteractions(fit_repeated, idata = in_repeated, idesign = ~ Scenario, pairwise = c("Gender", "Level of Vitality"))
# confirm the interaction
testInteractions(fit_repeated, idata = in_repeated, idesign = ~ Scenario, pairwise = c("Gender", "`Level of Vitality`"))
View(aggregate_data_wide)
install.packages("bruceR")
install.packages("bruceR")
library(bruceR)
mixed.2_1b1w
in_repeated <- expand.grid(`Scenario` = c("Business District", "Metro Station", "Night Traffic", "Pedestrian Zone"))
three_factor_aov <- Anova(fit_repeated, idata = in_repeated, idesign = ~ Scenario, type = 'III')
library(car)
three_factor_aov <- Anova(fit_repeated, idata = in_repeated, idesign = ~ Scenario, type = 'III')
summary(three_factor_aov, multivariate = FALSE, univariate = TRUE)
# confirm the interaction
MANOVA(aggregate_data_wide, dvs = c("Business District", "Metro Station", "Night Traffic", "Pedestrian Zone"),
between = c("Gender", "Level of Vitality"), within = "Scenario")
View(aggregate_data_plus)
# confirm the interaction
MANOVA(aggregate_data_plus, subID = "Key", dv = "Restoration",
between = c("Gender", "Level of Vitality"), within = "Scenario")
# confirm the interaction
MANOVA(aggregate_data_plus, subID = "Key", dv = "Restoration",
between = c("Gender", "`Level of Vitality`"), within = "Scenario")
# confirm the interaction
MANOVA(aggregate_data_plus %>% rename(Vitality = `Level of Vitality`), subID = "Key", dv = "Restoration",
between = c("Gender", "Vitality"), within = "Scenario")
library(phia)
in_repeated_v2 <- expand.grid(`Scenario` = c("CBD", "Metro", "Night", "Pedestrian"))
# method 2: testInteractions().
fit_repeated_v2 <- lm(cbind(CBD, Metro, Night, Pedestrian) ~ Gender * Vitality, data = aggregate_data_wide %>%
rename(Vitality = `Level of Vitality`, CBD = `Business District`,
Metro = `Metro Station`, Night = `Night Traffic`, Pedestrian = `Pedestrian Zone`))
testInteractions(fit_repeated_v2, idata = in_repeated_v2)
testInteractions(fit_repeated_v2, idata = in_repeated_v2, fixed = "Gender", across = "Vitality")
testInteractions(fit_repeated_v2, idata = in_repeated_v2, fixed = "Vitality", across = "Gender")
